AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Resources:
  SamWeatherappDb:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      PrimaryKey:
        Name: name
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  SamWeatherappLambdaScan:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: scan.handler
      Runtime: nodejs16.x
      CodeUri: 's3://weatherappsource/scan.zip'
      Description: Scan DynamoDB table
      MemorySize: 128
      Timeout: 10
      Policies:
        - CloudWatchPutMetricPolicy: {}
        - DynamoDBReadPolicy:
             TableName: 
               Ref: SamWeatherappDb
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /scan/
            Method: GET
            RestApiId: 
                Ref: SamWeatherappApi
      Environment: 
        Variables: 
          TABLE_NAME: 
            Ref: SamWeatherappDb

  SamWeatherappLambdaAdd:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: add.handler
      Runtime: nodejs16.x
      CodeUri: 's3://weatherappsource/add.zip'
      Description: Add item to DynamoDB table
      MemorySize: 128
      Timeout: 10
      Policies:
        - CloudWatchPutMetricPolicy: { }
        - DynamoDBCrudPolicy:
            TableName:
              Ref: SamWeatherappDb
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /add/
            Method: GET
            RestApiId:
              Ref: SamWeatherappApi
      Environment:
        Variables:
          TABLE_NAME:
            Ref: SamWeatherappDb

  SamWeatherappApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: prod
        DefinitionBody:
            swagger: 2.0
            info:
              title:
                Ref: AWS::StackName
            paths:
              /scan:
                get:
                  produces:
                    - "application/json"
                  responses:
                   '200':
                     description: "200 response"
                     schema:
                       $ref: "#/definitions/Empty"
                     headers:
                       Access-Control-Allow-Origin:
                         type: "string"                  
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SamWeatherappLambdaScan.Arn}/invocations
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    passthroughBehavior: "when_no_match"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    type: "mock"
              /add:
                get:
                  produces:
                    - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  x-amazon-apigateway-integration:
                    httpMethod: POST
                    type: aws
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SamWeatherappLambdaAdd.Arn}/invocations
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    passthroughBehavior: "when_no_templates"
                    requestTemplates:
                      application/json: "{\"queryParams\": {#foreach($param in $input.params().querystring.keySet())\"$param\": \"$util.escapeJavaScript($input.params().querystring.get($param))\" #if($foreach.hasNext),#end#end}}"
                options:
                  consumes:
                    - "application/json"
                  produces:
                    - "application/json"
                  responses:
                    '200':
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    passthroughBehavior: "when_no_match"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    type: "mock"
            definitions:
              Empty:
                type: "object"
                title: "Empty Schema"
Outputs:
  ApiUrl:
    Description: URL of API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref SamWeatherappApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/prod'
